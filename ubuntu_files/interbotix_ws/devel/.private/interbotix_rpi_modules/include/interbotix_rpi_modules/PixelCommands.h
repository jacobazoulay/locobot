// Generated by gencpp from file interbotix_rpi_modules/PixelCommands.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_RPI_MODULES_MESSAGE_PIXELCOMMANDS_H
#define INTERBOTIX_RPI_MODULES_MESSAGE_PIXELCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_rpi_modules
{
template <class ContainerAllocator>
struct PixelCommands_
{
  typedef PixelCommands_<ContainerAllocator> Type;

  PixelCommands_()
    : cmd_type()
    , set_all_leds(false)
    , pixel(0)
    , color(0)
    , brightness(0)
    , period(0)
    , iterations(0)  {
    }
  PixelCommands_(const ContainerAllocator& _alloc)
    : cmd_type(_alloc)
    , set_all_leds(false)
    , pixel(0)
    , color(0)
    , brightness(0)
    , period(0)
    , iterations(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef uint8_t _set_all_leds_type;
  _set_all_leds_type set_all_leds;

   typedef uint8_t _pixel_type;
  _pixel_type pixel;

   typedef uint32_t _color_type;
  _color_type color;

   typedef uint8_t _brightness_type;
  _brightness_type brightness;

   typedef uint32_t _period_type;
  _period_type period;

   typedef uint8_t _iterations_type;
  _iterations_type iterations;





  typedef boost::shared_ptr< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> const> ConstPtr;

}; // struct PixelCommands_

typedef ::interbotix_rpi_modules::PixelCommands_<std::allocator<void> > PixelCommands;

typedef boost::shared_ptr< ::interbotix_rpi_modules::PixelCommands > PixelCommandsPtr;
typedef boost::shared_ptr< ::interbotix_rpi_modules::PixelCommands const> PixelCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator1> & lhs, const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type &&
    lhs.set_all_leds == rhs.set_all_leds &&
    lhs.pixel == rhs.pixel &&
    lhs.color == rhs.color &&
    lhs.brightness == rhs.brightness &&
    lhs.period == rhs.period &&
    lhs.iterations == rhs.iterations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator1> & lhs, const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_rpi_modules

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c3edd3691d72aef2f0cabd73f60138d";
  }

  static const char* value(const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c3edd3691d72aefULL;
  static const uint64_t static_value2 = 0x2f0cabd73f60138dULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_rpi_modules/PixelCommands";
  }

  static const char* value(const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used specifically in the interbotix_rpi_modules package\n"
"#\n"
"# Configure NeoPixel Leds on a Raspberry Pi\n"
"\n"
"string cmd_type       # Either 'pulse', 'blink', 'brightness', or 'color'.\n"
"                      # Note that the 'pulse' and 'brightness' options will\n"
"                      # affect all Leds even if 'set_all_leds' is set to False.\n"
"bool set_all_leds     # Set to True to configure all LEDs\n"
"uint8 pixel           # Index of NeoPixel to change (only considered if 'set_all_leds' is false)\n"
"uint32 color			    # Value indicates Color to be used (HEX - RGB)\n"
"uint8 brightness      # Value indicates LED brightness level (0-255)\n"
"uint32 period			    # time delay for blink or pulse (milliseconds)\n"
"uint8 iterations		  # iterations = number of iterations for blink or pulse\n"
;
  }

  static const char* value(const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.set_all_leds);
      stream.next(m.pixel);
      stream.next(m.color);
      stream.next(m.brightness);
      stream.next(m.period);
      stream.next(m.iterations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixelCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_rpi_modules::PixelCommands_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_type);
    s << indent << "set_all_leds: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_all_leds);
    s << indent << "pixel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pixel);
    s << indent << "color: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.color);
    s << indent << "brightness: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brightness);
    s << indent << "period: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.period);
    s << indent << "iterations: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iterations);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_RPI_MODULES_MESSAGE_PIXELCOMMANDS_H
