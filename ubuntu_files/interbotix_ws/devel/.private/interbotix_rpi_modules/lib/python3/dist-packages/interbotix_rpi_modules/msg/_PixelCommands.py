# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_rpi_modules/PixelCommands.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PixelCommands(genpy.Message):
  _md5sum = "3c3edd3691d72aef2f0cabd73f60138d"
  _type = "interbotix_rpi_modules/PixelCommands"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message is used specifically in the interbotix_rpi_modules package
#
# Configure NeoPixel Leds on a Raspberry Pi

string cmd_type       # Either 'pulse', 'blink', 'brightness', or 'color'.
                      # Note that the 'pulse' and 'brightness' options will
                      # affect all Leds even if 'set_all_leds' is set to False.
bool set_all_leds     # Set to True to configure all LEDs
uint8 pixel           # Index of NeoPixel to change (only considered if 'set_all_leds' is false)
uint32 color			    # Value indicates Color to be used (HEX - RGB)
uint8 brightness      # Value indicates LED brightness level (0-255)
uint32 period			    # time delay for blink or pulse (milliseconds)
uint8 iterations		  # iterations = number of iterations for blink or pulse
"""
  __slots__ = ['cmd_type','set_all_leds','pixel','color','brightness','period','iterations']
  _slot_types = ['string','bool','uint8','uint32','uint8','uint32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_type,set_all_leds,pixel,color,brightness,period,iterations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PixelCommands, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_type is None:
        self.cmd_type = ''
      if self.set_all_leds is None:
        self.set_all_leds = False
      if self.pixel is None:
        self.pixel = 0
      if self.color is None:
        self.color = 0
      if self.brightness is None:
        self.brightness = 0
      if self.period is None:
        self.period = 0
      if self.iterations is None:
        self.iterations = 0
    else:
      self.cmd_type = ''
      self.set_all_leds = False
      self.pixel = 0
      self.color = 0
      self.brightness = 0
      self.period = 0
      self.iterations = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cmd_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BIBIB().pack(_x.set_all_leds, _x.pixel, _x.color, _x.brightness, _x.period, _x.iterations))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd_type = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.set_all_leds, _x.pixel, _x.color, _x.brightness, _x.period, _x.iterations,) = _get_struct_2BIBIB().unpack(str[start:end])
      self.set_all_leds = bool(self.set_all_leds)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cmd_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BIBIB().pack(_x.set_all_leds, _x.pixel, _x.color, _x.brightness, _x.period, _x.iterations))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd_type = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.set_all_leds, _x.pixel, _x.color, _x.brightness, _x.period, _x.iterations,) = _get_struct_2BIBIB().unpack(str[start:end])
      self.set_all_leds = bool(self.set_all_leds)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BIBIB = None
def _get_struct_2BIBIB():
    global _struct_2BIBIB
    if _struct_2BIBIB is None:
        _struct_2BIBIB = struct.Struct("<2BIBIB")
    return _struct_2BIBIB
